
# ---- Final Executable --- #

NAME = minishell

LIBFT = libft.a

# ---- Directories ---- #

DIR_OBJS		=	.objs/

DIR_SRC 		=	./src

DIR_LIBFT		=	src/utils/Libft/

LIBFT_A = $(DIR_LIBFT)$(LIBFT)

FILES = src/parsing/list/src/ft_lstnew.c \
		src/parsing/list/src/ft_lstsize.c \
		src/parsing/list/src/ft_lstlast.c \
		src/parsing/list/src/ft_print_list.c \
		src/parsing/list/src/ft_lstclear.c \
		src/parsing/list/src/ft_lstadd_back.c \
		src/parsing/list/src/ft_delone_double.c \
		src/parsing/list/src/ft_lstadd_back_double.c \
		src/parsing/list/src/ft_lstadd_front_double.c \
		src/parsing/list/src/ft_lstclear_double.c \
		src/parsing/list/src/ft_lstnew_double.c \
		src/parsing/list/create_list.c \
		src/utils/tracker/init_track.c \
		src/utils/tracker/track.c \
		src/utils/new_str.c \
		src/utils/init_shell.c \
		src/utils/garbage_collector/gc_func.c \
		src/utils/garbage_collector/gc_init.c \
		src/utils/error_handler/exit_shell.c \
		src/utils/logger/log.c \
		src/core/init_ctx.c \
		minishell.c \
		prompt.c \

HEAD = $(shell find . -name "*.h")


OBJS	= ${addprefix ${DIR_OBJS},${FILES:.c=.o}}

# ---- Compilation ---- #

CFLAGS = -Wall -Werror -Wextra -I . -fsanitize=address -g3 -D DEBUG

# ********* RULES ******** #

# ---- Commands ---- #

RM		=	rm -rf
MKDIR	=	mkdir -p

# ********* RULES ******** #

all		:	$(NAME)

debug	:	 


$(LIBFT_A):	force
	@ ${MAKE} ${LIBFT} -C ${DIR_LIBFT} -j4

.PHONY:	all clean fclean re fclean_lib fclean_all force

# ---- Variables Rules ---- #

${NAME}	:	${OBJS} $(LIBFT_A)
			${CC} ${CFLAGS} -o ${NAME} ${OBJS} -L ${DIR_LIBFT} -lft -lreadline

# ---- Compiled Rules ---- #

${DIR_OBJS}%.o:%.c ${HEAD} 
	@				$(MKDIR) $(shell dirname $@)
					${CC} ${CFLAGS} -I $(DIR_LIBFT) -I. -c $< -o $@	

# ---- Usual Commands ---- #

fclean_lib		:
					make fclean -C ${DIR_LIBFT}

clean			:
					${RM} traces.log
					${RM} ${DIR_OBJS}

fclean			:	clean
					${RM} ${NAME}

fclean_all		:	fclean fclean_lib

re				:	fclean_all
	$(MAKE) all
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   minish.h                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bfaure <bfaure@student.42lyon.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/06/06 11:28:04 by  mchenava         #+#    #+#             */
/*   Updated: 2023/06/06 16:22:38 by bfaure           ###   ########lyon.fr   */
/*                                                                            */
/* ************************************************************************** */

#ifndef MINISH_H
# define MINISH_H


/**
	===AUTHORIZED FUNCTIONS===
	readline, rl_clear_history, rl_on_new_line,
	rl_replace_line, rl_redisplay, add_history,
	printf, malloc, free, write, access, open, read,
	close, fork, wait, waitpid, wait3, wait4, signal,
	sigaction, sigemptyset, sigaddset, kill, exit,
	getcwd, chdir, stat, lstat, fstat, unlink, execve,
	dup, dup2, pipe, opendir, readdir, closedir,
	strerror, perror, isatty, ttyname, ttyslot, ioctl,
	getenv, tcsetattr, tcgetattr, tgetent, tgetflag,
	tgetnum, tgetstr, tgoto, tputs
	**/
# include <stdio.h>      // printf
# include <stdlib.h>     // malloc, free, exit, getenv
# include <unistd.h>     // access, open, read, close, fork, chdir, getcwd, execve, dup, dup2, pipe, isatty, ttyname, ttyslot, unlink
# include <sys/wait.h>   // wait, waitpid, wait3, wait4
# include <signal.h>     // signal, sigaction, sigemptyset, sigaddset, kill
# include <sys/stat.h>   // stat, lstat, fstat
# include <dirent.h>     // opendir, readdir, closedir
# include <string.h>     // strerror
# include <errno.h>      // perror
# include <termios.h>    // tcsetattr, tcgetattr
# include <term.h>       // tgetent, tgetflag, tgetnum, tgetstr, tgoto, tputs
# include <sys/ioctl.h>  // ioctl
# include <readline/readline.h> // readline, rl_clear_history, rl_on_new_line, rl_replace_line, rl_redisplay, add_history

# include "src/utils/Libft/headers/libft.h"
# include "src/types/types.h"
# include "src/types/enums.h"
# include "src/core/core.h"
# include "src/parsing/parsing.h"
# include "src/utils/utils.h"

void	prompt(void);

#endif