exec_cmd
cmd = /usr/bin/cat
check_builtins str = /usr/bin/cat
check_builtins = NONE
exec_bin
---------------------------- #cmd result# ----------------------------
exec_cmd
cmd = echo
check_builtins str = echo
Bonjour root 
============== loging step 18: the cmd echo ==================
step type: 3
current function: [echo_builtins]
nb of pointers: 105
last pointer allocated : 0x60b0000005c0, size: 112, allocated in func: echo_builtins at step : 17
====================================================

exec cmd status = 0
last status = 0
processing done
============== loging step 18: the cmd echo ==================
step type: 3
current function: [echo_builtins]
nb of pointers: 105
last pointer allocated : 0x60b0000005c0, size: 112, allocated in func: echo_builtins at step : 17
====================================================

lst_get_index name = PWD=
tmp->index = 1
[?2004h/mnt/c/Users/benja/Desktop/42_Project/42LiteBash$ 
[?2004l
cmd size: 3
check_builtins str = cat
check_builtins = NONE
============== loging step 21: fill cmd struct ==================
step type: 2
current function: [*new_cmd]
nb of pointers: 94
last pointer allocated : 0x603000001b40, size: 32, allocated in func: *new_cmd at step : 21
====================================================

cmd size: 2
check_builtins str = grep
check_builtins = NONE
============== loging step 22: fill cmd struct ==================
step type: 2
current function: [*new_cmd]
nb of pointers: 97
last pointer allocated : 0x603000001c60, size: 24, allocated in func: *new_cmd at step : 22
====================================================

cmd size: 2
check_builtins str = cat
check_builtins = NONE
============== loging step 23: fill cmd struct ==================
step type: 2
current function: [*new_cmd]
nb of pointers: 100
last pointer allocated : 0x603000001d50, size: 24, allocated in func: *new_cmd at step : 23
====================================================

cmd size: 5
check_builtins str = echo
============== loging step 24: fill cmd struct ==================
step type: 2
current function: [*new_cmd]
nb of pointers: 105
last pointer allocated : 0x603000001e40, size: 24, allocated in func: *new_cmd at step : 24
====================================================

============== loging step 24: fill cmd struct ==================
step type: 2
current function: [*new_cmd]
nb of pointers: 105
last pointer allocated : 0x603000001e40, size: 24, allocated in func: *new_cmd at step : 24
====================================================

status = 0
<<<<<<<<<<<<<<<< loging struct >>>>>>>>>>>>>>>>
â””â”€â”€ block 1    :
	â”‚
	â”œâ”€â”€ pipeline 1    :
	â”‚	â”‚
	â”‚	â””â”€â”€ cmd: [/usr/bin/cat],[-e],[Makefile],
	â”‚
	â”œâ”€â”€ redir in_type: NONE, out_type: NONE
	â”‚
	â””â”€â”€ files : infile: (null), outfile: (null)
	â”‚
	â”œâ”€â”€ pipeline 2    :
	â”‚	â”‚
	â”‚	â””â”€â”€ cmd: [/usr/bin/grep],[CC],
	â”‚
	â”œâ”€â”€ redir in_type: NONE, out_type: NONE
	â”‚
	â””â”€â”€ files : infile: (null), outfile: (null)
	â”‚
	â”œâ”€â”€ pipeline 3    :
	â”‚	â”‚
	â”‚	â””â”€â”€ cmd: [/usr/bin/cat],[-e],
	â”‚
	â”œâ”€â”€ redir in_type: NONE, out_type: >
	â”‚
	â””â”€â”€ files : infile: (null), outfile: test.out
â””â”€â”€ block 2    :
	â”‚
	â”œâ”€â”€ pipeline 1    :
	â”‚	â”‚
	â”‚	â””â”€â”€ cmd: [echo],["],[Bonjour ],[$USER],["],
	â”‚		â”‚
	â”‚		â””â”€â”€ chunk 1    :start = 2, end = 4, type = "
	â”‚			â””â”€â”€ chunk txt: [Bonjour ],[root],
	â”‚
	â”œâ”€â”€ redir in_type: NONE, out_type: >>
	â”‚
	â””â”€â”€ files : infile: (null), outfile: test.out
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

processing
parent_process
child_process
handle_redir
newfd
in_fd = 0
newfd
exec_cmd
cmd = /usr/bin/cat
check_builtins str = /usr/bin/cat
check_builtins = NONE
exec_bin
---------------------------- #cmd result# ----------------------------
parent_process
last_process
child_process
handle_redir
handle_redir
newfd
newfd
in_fd = 3
in_fd = 0
newfd
# **************************************************************************** #$
#                                                                              #$
#                                                         :::      ::::::::    #$
#    Makefile                                           :+:      :+:    :+:    #$
#                                                     +:+ +:+         +:+      #$
#    By:  mchenava < mchenava@student.42lyon.fr>    +#+  +:+       +#+         #$
#                                                 +#+#+#+#+#+   +#+            #$
#    Created: 2023/06/09 10:10:14 by bfaure            #+#    #+#              #$
#    Updated: 2023/08/24 11:50:47 by  mchenava        ###   ########.fr        #$
#                                                                              #$
# **************************************************************************** #$
$
# ---- Final Executable --- #$
$
NAME = minishell$
$
LIBFT = libft.a$
$
# ---- Directories ---- #$
$
DIR_OBJS		=	.objs/$
$
DIR_SRC 		=	./src$
$
DIR_LIBFT		=	src/utils/Libft/$
$
LIBFT_A = $(DIR_LIBFT)$(LIBFT)$
$
FILES =			src/parsing/list/dlst_add.c  \$
				src/parsing/list/dlst_del.c  \$
				src/parsing/list/lst_base_func.c \$
				src/parsing/list/lst_set_get.c \$
				src/parsing/list/dlst_base_func.c \$
				src/parsing/list/dlst_set_get.c  \$
				src/parsing/list/lst_add.c  \$
				src/parsing/list/lst_del.c  \$
				src/parsing/syntax/syntax_check.c \$
				src/parsing/syntax/control_meta.c \$
				src/parsing/get_meta.c \$
				src/utils/tracker/init_track.c \$
				src/utils/tracker/track.c \$
				src/utils/new_str.c \$
				src/utils/init_shell.c \$
				src/utils/garbage_collector/gc_func.c \$
				src/utils/garbage_collector/gc_init.c \$
				src/utils/error_handler/exit_shell.c \$
				src/utils/logger/log.c \$
				src/core/init_ctx.c \$
				minishell.c \$
				prompt.c \$
				src/parsing/pars_line.c \$
				src/parsing/pars_paths.c \$
				src/parsing/pars_env.c \$
				src/parsing/split_parse.c \$
				src/parsing/free_split_line.c \$
				src/parsing/fill_struct/block.c \$
				src/parsing/fill_struct/cmd.c \$
				src/parsing/fill_struct/chunk_size.c \$
				src/parsing/fill_struct/chunk.c \$
				src/parsing/fill_struct/check_builtins.c \$
				src/parsing/pipeline/parse_pipe.c\$
				src/parsing/pipeline/pipeline.c \$
				src/parsing/new_file.c \$
				src/parsing/skip_to_space.c \$
				src/parsing/expand.c \$
				src/utils/clean_blocks.c \$
				src/builtins/echo.c \$
				src/core/exec_echo.c \$
				src/builtins/pwd.c \$
				src/builtins/cd.c \$
				src/parsing/make_env.c \$
				src/builtins/export.c \$
				src/builtins/unset.c \$
				src/parsing/list/lst_index.c \$
				src/core/execution/exec_cmd.c \$
				src/core/execution/run_pipeline.c \$
				src/core/execution/run_pipeline_utils.c \$
				src/core/execution/exec_redir_handle.c \$
				src/builtins/run_builtin.c \$
$
HEAD = $(shell find . -name "*.h")$
$
INC = -I. -I$(DIR_LIBFT)$
$
OBJS	= ${addprefix ${DIR_OBJS},${FILES:.c=.o}}$
$
# ---- Compilation ---- #$
$
CFLAGS = -Wall -Werror -Wextra $(DEB_FLAGS) $
$
DEB_FLAGS = -g3 -fsanitize=address$
$
# ********* RULES ******** #$
$
# ---- Commands ---- #$
$
RM		=	rm -rf$
MKDIR	=	mkdir -p$
$
# ********* RULES ******** #$
$
all		:	$(NAME)$
$
debug	:$
$
run		:	all$
			./${NAME}$
$
leaks:    all$
		@${RM} valgrind.txt $
		echo "{" > valgrind_ignore_leaks.txt$
		echo "leak readline" >> valgrind_ignore_leaks.txt$
		echo "    Memcheck:Leak" >> valgrind_ignore_leaks.txt$
		echo "    ..." >> valgrind_ignore_leaks.txt$
		echo "    fun:readline" >> valgrind_ignore_leaks.txt$
		echo "}" >> valgrind_ignore_leaks.txt$
		echo "{" >> valgrind_ignore_leaks.txt$
		echo "    leak add_history" >> valgrind_ignore_leaks.txt$
		echo "    Memcheck:Leak" >> valgrind_ignore_leaks.txt$
		echo "    ..." >> valgrind_ignore_leaks.txt$
		echo "    fun:add_history" >> valgrind_ignore_leaks.txt$
		echo "}" >> valgrind_ignore_leaks.txt$
		valgrind --suppressions=valgrind_ignore_leaks.txt --leak-check=full \$
			--show-leak-kinds=all --track-fds=yes \$
			--show-mismatched-frees=yes --read-var-info=yes \$
			--log-file=valgrind.txt -s --trace-children=yes ./${NAME}$
$
$(LIBFT_A):	force$
	@ ${MAKE} ${LIBFT} -C ${DIR_LIBFT} -j4$
$
.PHONY:	all clean fclean re fclean_lib fclean_all force$
$
# ---- Variables Rules ---- #$
$
${NAME}	:	${OBJS} $(LIBFT_A)$
			${CC} ${CFLAGS} $(INC) $^ -lreadline -o $@$
$
# ---- Compiled Rules ---- #$
$
${DIR_OBJS}%.o:%.c ${HEAD} $
	@				$(MKDIR) $(shell dirname $@)$
					${CC} ${CFLAGS} $(INC) -c $<  -o $@$
$
watch : $(DIR_SRC)$
	fswatch -o $^ | make && ./$(NAME)$
$
# ---- Usual Commands ---- #$
$
fclean_lib		:$
					make fclean -C ${DIR_LIBFT} -j4$
$
clean			:$
					${RM} traces.log$
					${RM} ${DIR_OBJS}$
$
fclean			:	clean$
					${RM} ${NAME}$
$
fclean_all		:	fclean fclean_lib$
$
re				:	fclean_all$
	$(MAKE) all$
newfd
exec_cmd
there is a redir out
cmd = /usr/bin/grep
check_builtins str = /usr/bin/grep
Le statut de sortie du programme est 0
exec bin status = 0
check_builtins = NONE
exec_bin
exec cmd status = 0
child status = 0
---------------------------- #cmd result# ----------------------------
last_process
handle_redir
newfd
in_fd = 0
newfd
there is a redir out
newfd
newfd
exec_cmd
cmd = echo
check_builtins str = echo
Bonjour root 
============== loging step 27: the cmd echo ==================
step type: 3
current function: [echo_builtins]
nb of pointers: 105
last pointer allocated : 0x60b000000930, size: 112, allocated in func: echo_builtins at step : 26
====================================================

exec cmd status = 0
last status = 0
processing done
============== loging step 27: the cmd echo ==================
step type: 3
current function: [echo_builtins]
nb of pointers: 105
last pointer allocated : 0x60b000000930, size: 112, allocated in func: echo_builtins at step : 26
====================================================

lst_get_index name = PWD=
tmp->index = 1
[?2004h/mnt/c/Users/benja/Desktop/42_Project/42LiteBash$ 
[?2004l
cmd size: 3
check_builtins str = cat
check_builtins = NONE
============== loging step 30: fill cmd struct ==================
step type: 2
current function: [*new_cmd]
nb of pointers: 94
last pointer allocated : 0x603000002020, size: 32, allocated in func: *new_cmd at step : 30
====================================================

cmd size: 2
check_builtins str = grep
check_builtins = NONE
============== loging step 31: fill cmd struct ==================
step type: 2
current function: [*new_cmd]
nb of pointers: 97
last pointer allocated : 0x603000002140, size: 24, allocated in func: *new_cmd at step : 31
====================================================

cmd size: 2
check_builtins str = cat
check_builtins = NONE
============== loging step 32: fill cmd struct ==================
step type: 2
current function: [*new_cmd]
nb of pointers: 100
last pointer allocated : 0x603000002230, size: 24, allocated in func: *new_cmd at step : 32
====================================================

cmd size: 5
check_builtins str = echo
============== loging step 33: fill cmd struct ==================
step type: 2
current function: [*new_cmd]
nb of pointers: 105
last pointer allocated : 0x603000002320, size: 24, allocated in func: *new_cmd at step : 33
====================================================

============== loging step 33: fill cmd struct ==================
step type: 2
current function: [*new_cmd]
nb of pointers: 105
last pointer allocated : 0x603000002320, size: 24, allocated in func: *new_cmd at step : 33
====================================================

status = 0
<<<<<<<<<<<<<<<< loging struct >>>>>>>>>>>>>>>>
â””â”€â”€ block 1    :
	â”‚
	â”œâ”€â”€ pipeline 1    :
	â”‚	â”‚
	â”‚	â””â”€â”€ cmd: [/usr/bin/cat],[-e],[Makefile],
	â”‚
	â”œâ”€â”€ redir in_type: NONE, out_type: NONE
	â”‚
	â””â”€â”€ files : infile: (null), outfile: (null)
	â”‚
	â”œâ”€â”€ pipeline 2    :
	â”‚	â”‚
	â”‚	â””â”€â”€ cmd: [/usr/bin/grep],[CC],
	â”‚
	â”œâ”€â”€ redir in_type: NONE, out_type: NONE
	â”‚
	â””â”€â”€ files : infile: (null), outfile: (null)
	â”‚
	â”œâ”€â”€ pipeline 3    :
	â”‚	â”‚
	â”‚	â””â”€â”€ cmd: [/usr/bin/cat],[-e],
	â”‚
	â”œâ”€â”€ redir in_type: NONE, out_type: >
	â”‚
	â””â”€â”€ files : infile: (null), outfile: test.out
â””â”€â”€ block 2    :
	â”‚
	â”œâ”€â”€ pipeline 1    :
	â”‚	â”‚
	â”‚	â””â”€â”€ cmd: [echo],["],[Bonjour ],[$USER],["],
	â”‚		â”‚
	â”‚		â””â”€â”€ chunk 1    :start = 2, end = 4, type = "
	â”‚			â””â”€â”€ chunk txt: [Bonjour ],[root],
	â”‚
	â”œâ”€â”€ redir in_type: NONE, out_type: >>
	â”‚
	â””â”€â”€ files : infile: (null), outfile: test.out
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

processing
parent_process
child_process
handle_redir
newfd
in_fd = 0
newfd
exec_cmd
cmd = /usr/bin/cat
check_builtins str = /usr/bin/cat
check_builtins = NONE
exec_bin
---------------------------- #cmd result# ----------------------------
parent_process
last_process
child_process
handle_redir
handle_redir
newfd
newfd
in_fd = 0
newfd
in_fd = 3
newfd
there is a redir out
exec_cmd
cmd = /usr/bin/grep
# **************************************************************************** #$
#                                                                              #$
#                                                         :::      ::::::::    #$
#    Makefile                                           :+:      :+:    :+:    #$
#                                                     +:+ +:+         +:+      #$
#    By:  mchenava < mchenava@student.42lyon.fr>    +#+  +:+       +#+         #$
#                                                 +#+#+#+#+#+   +#+            #$
#    Created: 2023/06/09 10:10:14 by bfaure            #+#    #+#              #$
#    Updated: 2023/08/24 11:50:47 by  mchenava        ###   ########.fr        #$
#                                                                              #$
# **************************************************************************** #$
$
# ---- Final Executable --- #$
$
NAME = minishell$
$
LIBFT = libft.a$
$
# ---- Directories ---- #$
$
DIR_OBJS		=	.objs/$
$
DIR_SRC 		=	./src$
$
DIR_LIBFT		=	src/utils/Libft/$
$
LIBFT_A = $(DIR_LIBFT)$(LIBFT)$
$
FILES =			src/parsing/list/dlst_add.c  \$
				src/parsing/list/dlst_del.c  \$
				src/parsing/list/lst_base_func.c \$
				src/parsing/list/lst_set_get.c \$
				src/parsing/list/dlst_base_func.c \$
				src/parsing/list/dlst_set_get.c  \$
				src/parsing/list/lst_add.c  \$
				src/parsing/list/lst_del.c  \$
				src/parsing/syntax/syntax_check.c \$
				src/parsing/syntax/control_meta.c \$
				src/parsing/get_meta.c \$
				src/utils/tracker/init_track.c \$
				src/utils/tracker/track.c \$
				src/utils/new_str.c \$
				src/utils/init_shell.c \$
				src/utils/garbage_collector/gc_func.c \$
				src/utils/garbage_collector/gc_init.c \$
				src/utils/error_handler/exit_shell.c \$
				src/utils/logger/log.c \$
				src/core/init_ctx.c \$
				minishell.c \$
				prompt.c \$
				src/parsing/pars_line.c \$
				src/parsing/pars_paths.c \$
				src/parsing/pars_env.c \$
				src/parsing/split_parse.c \$
				src/parsing/free_split_line.c \$
				src/parsing/fill_struct/block.c \$
				src/parsing/fill_struct/cmd.c \$
				src/parsing/fill_struct/chunk_size.c \$
				src/parsing/fill_struct/chunk.c \$
				src/parsing/fill_struct/check_builtins.c \$
				src/parsing/pipeline/parse_pipe.c\$
				src/parsing/pipeline/pipeline.c \$
				src/parsing/new_file.c \$
				src/parsing/skip_to_space.c \$
				src/parsing/expand.c \$
				src/utils/clean_blocks.c \$
				src/builtins/echo.c \$
				src/core/exec_echo.c \$
				src/builtins/pwd.c \$
				src/builtins/cd.c \$
				src/parsing/make_env.c \$
				src/builtins/export.c \$
				src/builtins/unset.c \$
				src/parsing/list/lst_index.c \$
				src/core/execution/exec_cmd.c \$
				src/core/execution/run_pipeline.c \$
				src/core/execution/run_pipeline_utils.c \$
				src/core/execution/exec_redir_handle.c \$
				src/builtins/run_builtin.c \$
$
HEAD = $(shell find . -name "*.h")$
$
INC = -I. -I$(DIR_LIBFT)$
$
OBJS	= ${addprefix ${DIR_OBJS},${FILES:.c=.o}}$
$
# ---- Compilation ---- #$
$
CFLAGS = -Wall -Werror -Wextra $(DEB_FLAGS) $
$
DEB_FLAGS = -g3 -fsanitize=address$
$
# ********* RULES ******** #$
$
# ---- Commands ---- #$
$
RM		=	rm -rf$
MKDIR	=	mkdir -p$
$
# ********* RULES ******** #$
$
all		:	$(NAME)$
$
debug	:$
$
run		:	all$
			./${NAME}$
$
leaks:    all$
		@${RM} valgrind.txt $
		echo "{" > valgrind_ignore_leaks.txt$
		echo "leak readline" >> valgrind_ignore_leaks.txt$
		echo "    Memcheck:Leak" >> valgrind_ignore_leaks.txt$
		echo "    ..." >> valgrind_ignore_leaks.txt$
		echo "    fun:readline" >> valgrind_ignore_leaks.txt$
		echo "}" >> valgrind_ignore_leaks.txt$
		echo "{" >> valgrind_ignore_leaks.txt$
		echo "    leak add_history" >> valgrind_ignore_leaks.txt$
		echo "    Memcheck:Leak" >> valgrind_ignore_leaks.txt$
		echo "    ..." >> valgrind_ignore_leaks.txt$
		echo "    fun:add_history" >> valgrind_ignore_leaks.txt$
		echo "}" >> valgrind_ignore_leaks.txt$
		valgrind --suppressions=valgrind_ignore_leaks.txt --leak-check=full \$
			--show-leak-kinds=all --track-fds=yes \$
			--show-mismatched-frees=yes --read-var-info=yes \$
			--log-file=valgrind.txt -s --trace-children=yes ./${NAME}$
$
$(LIBFT_A):	force$
	@ ${MAKE} ${LIBFT} -C ${DIR_LIBFT} -j4$
$
.PHONY:	all clean fclean re fclean_lib fclean_all force$
$
# ---- Variables Rules ---- #$
$
${NAME}	:	${OBJS} $(LIBFT_A)$
			${CC} ${CFLAGS} $(INC) $^ -lreadline -o $@$
$
# ---- Compiled Rules ---- #$
$
${DIR_OBJS}%.o:%.c ${HEAD} $
	@				$(MKDIR) $(shell dirname $@)$
					${CC} ${CFLAGS} $(INC) -c $<  -o $@$
$
watch : $(DIR_SRC)$
	fswatch -o $^ | make && ./$(NAME)$
$
# ---- Usual Commands ---- #$
$
fclean_lib		:$
					make fclean -C ${DIR_LIBFT} -j4$
$
clean			:$
					${RM} traces.log$
					${RM} ${DIR_OBJS}$
$
fclean			:	clean$
					${RM} ${NAME}$
$
fclean_all		:	fclean fclean_lib$
$
re				:	fclean_all$
	$(MAKE) all$
check_builtins str = /usr/bin/grep
check_builtins = NONE
exec_bin
---------------------------- #cmd result# ----------------------------
Le statut de sortie du programme est 0
exec bin status = 0
exec cmd status = 0
child status = 0
last_process
handle_redir
newfd
in_fd = 0
newfd
there is a redir out
newfd
newfd
exec_cmd
cmd = echo
check_builtins str = echo
Bonjour root 
============== loging step 36: the cmd echo ==================
step type: 3
current function: [echo_builtins]
nb of pointers: 105
last pointer allocated : 0x60b000000ca0, size: 112, allocated in func: echo_builtins at step : 35
====================================================

exec cmd status = 0
last status = 0
processing done
============== loging step 36: the cmd echo ==================
step type: 3
current function: [echo_builtins]
nb of pointers: 105
last pointer allocated : 0x60b000000ca0, size: 112, allocated in func: echo_builtins at step : 35
====================================================

lst_get_index name = PWD=
tmp->index = 1
[?2004h/mnt/c/Users/benja/Desktop/42_Project/42LiteBash$ ^C[?2004l